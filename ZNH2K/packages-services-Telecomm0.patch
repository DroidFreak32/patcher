From 157b5cf2460d762dc85061f6a0843fd6b4560381 Mon Sep 17 00:00:00 2001
From: Sultanxda <sultanxda@gmail.com>
Date: Thu, 28 Jul 2016 13:44:29 -0700
Subject: [PATCH] Squashed commit of the following:

commit a154eed09d48c339c4c38854ddde8886ea995246
Author: Hall Liu <hallliu@google.com>
Date:   Wed Jan 27 11:07:07 2016 -0800

    DO NOT MERGE - Restrict ability to add call based on device provision status

    Always return false for canAddCall if device is not yet provisioned.

    Bug: 26303187
    Change-Id:I9c4ebc8b954a79562b2ec83d59314a3fb621ddfb
    (cherry picked from commit a06c9a4aef69ae27b951523cf72bf72412bf48fa)

commit 50c58604dc9b6aed638d510f378f756da8f8b803
Author: Ravindra <c_rthat@codeaurora.org>
Date:   Fri Jan 22 10:54:12 2016 +0530

    Fix to prevent NPE

    While propagating merge failure to InCallUI check for call extras
    to be empty.

    Change-Id: I5192eb84fb67b369dd3b48f95ccb7571493574e5
    CRs-Fixed: 964586

commit a5ee9a7dd0aa70139ed0e7252f254e7a374151cb
Author: Sandeep Kunta <skunta@codeaurora.org>
Date:   Thu Feb 4 11:55:47 2016 +0530

    Remove TONE_SUPERVISORY_CH

    Remove TONE_SUPERVISORY_CH and related code, since its no
    longer used.

    Change-Id: I7ef51a7f62f94fa422767b253bfa3eb70857b580
    CRs-Fixed: 967597

commit 95a3e6688ef1c588c31a586d9084d299fe9e3927
Author: Shriram Ganesh <sganesh@codeaurora.org>
Date:   Fri Dec 11 15:52:15 2015 -0800

    Fix a bug where conference call does not automatically resume.

    The scenario is a background conference call and a foreground call
    in dialing state. When user cancels the foreground call, the
    background conference call is not automically resumed. This is
    because the logic for making a held call as the foreground call
    depends on there being only one call in the list of calls
    maintained by CallsManager. However, in a conference scenario there
    is more than one call object which are children of a top level
    conference call. The fix is to check the number of top level calls
    in held state.

    Change-Id: I4092e8c38ac6217002ef426d7674f8a6e4c837ab
    CRs-Fixed: 946284

commit bce16cb702f80b15bc70f078507c25c456729758
Author: Shriram Ganesh <sganesh@codeaurora.org>
Date:   Tue Dec 1 16:15:48 2015 -0800

    Fix disabled merge button on conference failure.

    There is currently no direct plumbing of the conference failure
    to InCallUI. Instead it depends on the capabilities refresh.
    In the conference failure scenario, there is no such change
    and as a result the merge button remains greyed out until a
    subsequent update using state or extras. The fix here is to
    create a dummy extra to refresh the UI.

    Change-Id: Id487418aa4729f822ba0a19661805e1bf3ccbb6a
    CRs-Fixed: 931958

commit 51fed81985c59014c804d600dde8b2ce1e7c8e25
Author: Mengjun Leng <mengju@codeaurora.org>
Date:   Wed Nov 25 15:14:42 2015 +0800

    Fix sound output from headset when switching speaker to BT

    If first close speaker, audio device can be first selected as
    headset, and when BT SCO is connected, audio device will be
    selected as BT headset. If set BT connected directly, then
    audio path can route to BT by default.

    Change-Id: I73411ee52f0045b48243b4fac86a81aec6d2e8d1
    CRs-Fixed: 943847

Change-Id: Ie22188078be558f1e47a384dd676446b3a518214
---
 .../android/server/telecom/CallAudioManager.java   |  1 -
 src/com/android/server/telecom/CallsManager.java   | 33 +++++++++-------------
 .../server/telecom/ConnectionServiceWrapper.java   |  5 ++++
 .../android/server/telecom/InCallTonePlayer.java   |  7 -----
 4 files changed, 19 insertions(+), 27 deletions(-)

diff --git a/src/com/android/server/telecom/CallAudioManager.java b/src/com/android/server/telecom/CallAudioManager.java
index a946d80..32d70f3 100644
--- a/src/com/android/server/telecom/CallAudioManager.java
+++ b/src/com/android/server/telecom/CallAudioManager.java
@@ -508,7 +508,6 @@ final class CallAudioManager extends CallsManagerListenerBase
 
         // Audio route.
         if (mCallAudioState.getRoute() == CallAudioState.ROUTE_BLUETOOTH) {
-            turnOnSpeaker(false);
             turnOnBluetooth(true);
         } else if (mCallAudioState.getRoute() == CallAudioState.ROUTE_SPEAKER) {
             turnOnBluetooth(false);
diff --git a/src/com/android/server/telecom/CallsManager.java b/src/com/android/server/telecom/CallsManager.java
index 95c8004..3b4d0e2 100644
--- a/src/com/android/server/telecom/CallsManager.java
+++ b/src/com/android/server/telecom/CallsManager.java
@@ -29,6 +29,7 @@ import android.os.Trace;
 import android.provider.CallLog.Calls;
 import android.provider.Settings;
 import android.telecom.CallAudioState;
+import android.provider.Settings;
 import android.telecom.Conference;
 import android.telecom.Connection;
 import android.telecom.DisconnectCause;
@@ -175,7 +176,6 @@ public class CallsManager extends Call.ListenerBase implements VideoProviderProx
     private String mLchSub = null;
 
     private InCallTonePlayer mLocalCallReminderTonePlayer = null;
-    private InCallTonePlayer mSupervisoryCallHoldTonePlayer = null;
     private String mSubInConversation = null;
 
     private Runnable mStopTone;
@@ -1429,6 +1429,16 @@ public class CallsManager extends Call.ListenerBase implements VideoProviderProx
         return count;
     }
 
+    int getNumTopLevelCalls() {
+        int count = 0;
+        for (Call call : mCalls) {
+            if (call.getParentCall() == null) {
+                count++;
+            }
+        }
+        return count;
+    }
+
     Call getOutgoingCall() {
         return getFirstCallWithState(OUTGOING_CALL_STATES);
     }
@@ -1706,7 +1716,7 @@ public class CallsManager extends Call.ListenerBase implements VideoProviderProx
                 }
 
                 // If only call in call list is held call it's also a foreground call
-                if (mCalls.size() == 1 && call.getState() == CallState.ON_HOLD) {
+                if (getNumTopLevelCalls() == 1 && call.getState() == CallState.ON_HOLD) {
                     newForegroundCall = call;
                 }
 
@@ -1739,7 +1749,7 @@ public class CallsManager extends Call.ListenerBase implements VideoProviderProx
                 }
 
                 // If only call in call list is held call it's also a foreground call
-                if (mCalls.size() == 1 && call.getState() == CallState.ON_HOLD) {
+                if (getNumTopLevelCalls() == 1 && call.getState() == CallState.ON_HOLD) {
                     newForegroundCall = call;
                 }
 
@@ -2346,17 +2356,7 @@ public class CallsManager extends Call.ListenerBase implements VideoProviderProx
                     mPlayerFactory.createPlayer(InCallTonePlayer.TONE_HOLD_RECALL);
             mLocalCallReminderTonePlayer.start();
         }
-        if (sSupervisoryCallHoldToneConfig.equals("inband")) {
-            // if "persist.radio.sch_tone" is set to "inband", play inband supervisory
-            // call hold tone. if set to "dtmf", play the SCH tones
-            // over DTMF, don't play SCH tones for anyother value.
-            if (mSupervisoryCallHoldTonePlayer == null) {
-                Log.d(this, " startDsdaInCallTones: Supervisory call hold tone ");
-                mSupervisoryCallHoldTonePlayer =
-                        mPlayerFactory.createPlayer(InCallTonePlayer.TONE_SUPERVISORY_CH);
-                mSupervisoryCallHoldTonePlayer.start();
-            }
-        } else if (sSupervisoryCallHoldToneConfig.equals("dtmf")) {
+        if (sSupervisoryCallHoldToneConfig.equals("dtmf")) {
             Log.d(this, " startDsdaInCallTones: Supervisory call hold tone over dtmf ");
             playLchDtmf();
         }
@@ -2373,11 +2373,6 @@ public class CallsManager extends Call.ListenerBase implements VideoProviderProx
             mLocalCallReminderTonePlayer.stopTone();
             mLocalCallReminderTonePlayer = null;
         }
-        if (mSupervisoryCallHoldTonePlayer != null) {
-            Log.d(this, " stopMSimInCallTones: Supervisory call hold tone ");
-            mSupervisoryCallHoldTonePlayer.stopTone();
-            mSupervisoryCallHoldTonePlayer = null;
-        }
         if (sSupervisoryCallHoldToneConfig.equals("dtmf")) {
             Log.d(this, " stopMSimInCallTones: stop SCH Dtmf call hold tone ");
             stopLchDtmf();
diff --git a/src/com/android/server/telecom/ConnectionServiceWrapper.java b/src/com/android/server/telecom/ConnectionServiceWrapper.java
index a7b698a..ad606c7 100644
--- a/src/com/android/server/telecom/ConnectionServiceWrapper.java
+++ b/src/com/android/server/telecom/ConnectionServiceWrapper.java
@@ -360,6 +360,11 @@ final class ConnectionServiceWrapper extends ServiceBinder {
                             // the failure event all the way to InCallUI instead of stopping
                             // it here. That way we can also handle the UI of notifying that
                             // the merged has failed.
+                            Bundle extras = call.getExtras();
+                            if (extras != null) {
+                                extras.putInt("MergeFail", new java.util.Random().nextInt());
+                                call.setExtras(extras);
+                            }
                             mCallsManager.onMergeFailed(call);
                         } else {
                             Log.w(this, "setConferenceMergeFailed, unknown call id: %s", callId);
diff --git a/src/com/android/server/telecom/InCallTonePlayer.java b/src/com/android/server/telecom/InCallTonePlayer.java
index c2c6e62..649e10d 100644
--- a/src/com/android/server/telecom/InCallTonePlayer.java
+++ b/src/com/android/server/telecom/InCallTonePlayer.java
@@ -62,7 +62,6 @@ public final class InCallTonePlayer extends Thread {
     public static final int TONE_VOICE_PRIVACY = 13;
     public static final int TONE_VIDEO_UPGRADE = 14;
     public static final int TONE_HOLD_RECALL = 15;
-    public static final int TONE_SUPERVISORY_CH = 16;
 
     private static final int RELATIVE_VOLUME_EMERGENCY = 100;
     private static final int RELATIVE_VOLUME_HIPRI = 80;
@@ -189,12 +188,6 @@ public final class InCallTonePlayer extends Thread {
                     // Call hold recall tone is stopped by stopTone() method
                     toneLengthMillis = Integer.MAX_VALUE - TIMEOUT_BUFFER_MILLIS;
                     break;
-                case TONE_SUPERVISORY_CH:
-                    toneType = ToneGenerator.TONE_SUPERVISORY_CH;
-                    toneVolume = RELATIVE_VOLUME_HIPRI;
-                    // Supervisory call held tone is stopped by stopTone() method
-                    toneLengthMillis = Integer.MAX_VALUE - TIMEOUT_BUFFER_MILLIS;
-                    break;
                 case TONE_VOICE_PRIVACY:
                     // TODO: fill in.
                     throw new IllegalStateException("Voice privacy tone NYI.");
-- 
2.7.4

