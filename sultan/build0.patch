From 625c330c4a5486d7ae4e293ac8dc6b8ad4c0fde8 Mon Sep 17 00:00:00 2001
From: Steve Kondik <steve@cyngn.com>
Date: Wed, 10 Jun 2015 13:05:24 -0700
Subject: [PATCH] releasetools: Add support for LZMA in blockimgdiff

* Requires backports.lzma to be installed for Python2.
* To enable, set WITH_LZMA_OTA to true in the build environment.
* This results in significantly smaller OTA packages, which results
  in less $$$ being paid to deliver said OTAs. Unfortunately it is
  also significantly slower to decompress (parallelization may help).

For LineageOS 14.1.

Change-Id: I3b2f9c521ec5d3e7e57bcf1ffbf39305785425ab
---
 core/Makefile                               |  1 +
 tools/releasetools/blockimgdiff.py          | 19 ++++++++--
 tools/releasetools/common.py                | 56 +++++++++++++++++++----------
 tools/releasetools/ota_from_target_files.py | 24 +++++++++----
 4 files changed, 74 insertions(+), 26 deletions(-)

diff --git a/core/Makefile b/core/Makefile
index d17c655..3f179e8 100644
--- a/core/Makefile
+++ b/core/Makefile
@@ -2222,6 +2222,7 @@ $(INTERNAL_OTA_PACKAGE_TARGET): $(BUILT_TARGET_FILES_PACKAGE)
 	$(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH MKBOOTIMG=$(MKBOOTIMG) \
 	   $(OTA_FROM_TARGET_SCRIPT) -v \
 	   $(block_based) \
+	   $(if $(WITH_LZMA_OTA), -z) \
 	   -p $(HOST_OUT) \
 	   -k $(KEY_CERT_PAIR) \
 	   --backup=$(backuptool) \
diff --git a/tools/releasetools/blockimgdiff.py b/tools/releasetools/blockimgdiff.py
index 1cbf7f8..4497998 100644
--- a/tools/releasetools/blockimgdiff.py
+++ b/tools/releasetools/blockimgdiff.py
@@ -29,6 +29,12 @@ import threading
 import time
 import tempfile
 
+try:
+  from backports import lzma
+except ImportError:
+  lzma = None
+  pass
+
 from rangelib import RangeSet
 
 
@@ -262,7 +268,7 @@ class HeapItem(object):
 
 class BlockImageDiff(object):
   def __init__(self, tgt, src=None, threads=None, version=4,
-               disable_imgdiff=False):
+               disable_imgdiff=False, use_lzma=False):
     if threads is None:
       threads = multiprocessing.cpu_count() // 2
       if threads == 0:
@@ -276,6 +282,7 @@ class BlockImageDiff(object):
     self.touched_src_ranges = RangeSet()
     self.touched_src_sha1 = None
     self.disable_imgdiff = disable_imgdiff
+    self.use_lzma = use_lzma
 
     assert version in (1, 2, 3, 4)
 
@@ -693,7 +700,15 @@ class BlockImageDiff(object):
     print("Reticulating splines...")
     diff_q = []
     patch_num = 0
-    with open(prefix + ".new.dat", "wb") as new_f:
+
+    if lzma and self.use_lzma:
+        open_patch = lzma.open
+        new_file = ".new.dat.xz"
+    else:
+        open_patch = open
+        new_file = ".new.dat"
+
+    with open_patch(prefix + new_file, "wb") as new_f:
       for xf in self.transfers:
         if xf.style == "zero":
           tgt_size = xf.tgt_ranges.size() * self.tgt.blocksize
diff --git a/tools/releasetools/common.py b/tools/releasetools/common.py
index f90010f..3b2a326 100644
--- a/tools/releasetools/common.py
+++ b/tools/releasetools/common.py
@@ -29,6 +29,11 @@ import threading
 import time
 import zipfile
 
+try:
+  from backports import lzma;
+except ImportError:
+  lzma = None
+
 import blockimgdiff
 
 from hashlib import sha1 as sha1
@@ -1467,12 +1472,13 @@ def ComputeDifferences(diffs):
 
 class BlockDifference(object):
   def __init__(self, partition, tgt, src=None, check_first_block=False,
-               version=None, disable_imgdiff=False):
+               version=None, disable_imgdiff=False, use_lzma=False):
     self.tgt = tgt
     self.src = src
     self.partition = partition
     self.check_first_block = check_first_block
     self.disable_imgdiff = disable_imgdiff
+    self.use_lzma = use_lzma
 
     if version is None:
       version = 1
@@ -1484,7 +1490,8 @@ class BlockDifference(object):
 
     b = blockimgdiff.BlockImageDiff(tgt, src, threads=OPTIONS.worker_threads,
                                     version=self.version,
-                                    disable_imgdiff=self.disable_imgdiff)
+                                    disable_imgdiff=self.disable_imgdiff,
+                                    use_lzma=use_lzma)
     tmpdir = tempfile.mkdtemp()
     OPTIONS.tempfiles.append(tmpdir)
     self.path = os.path.join(tmpdir, partition)
@@ -1556,20 +1563,21 @@ class BlockDifference(object):
         return
 
       ranges_str = ranges.to_string_raw()
-      if self.version >= 4:
-        script.AppendExtra(('if (range_sha1("%s", "%s") == "%s" || '
-                            'block_image_verify("%s", '
-                            'package_extract_file("%s.transfer.list"), '
-                            '"%s.new.dat", "%s.patch.dat")) then') % (
-                            self.device, ranges_str, expected_sha1,
-                            self.device, partition, partition, partition))
-      elif self.version == 3:
-        script.AppendExtra(('if (range_sha1("%s", "%s") == "%s" || '
-                            'block_image_verify("%s", '
-                            'package_extract_file("%s.transfer.list"), '
-                            '"%s.new.dat", "%s.patch.dat")) then') % (
-                            self.device, ranges_str, expected_sha1,
-                            self.device, partition, partition, partition))
+      if self.version >= 3:
+        if lzma and self.use_lzma:
+          script.AppendExtra(('if (range_sha1("%s", "%s") == "%s" || '
+                              'block_image_verify("%s", '
+                              'package_extract_file("%s.transfer.list"), '
+                              '"%s.new.dat.xz", "%s.patch.dat")) then') % (
+                              self.device, ranges_str, expected_sha1,
+                              self.device, partition, partition, partition))
+        else:
+          script.AppendExtra(('if (range_sha1("%s", "%s") == "%s" || '
+                              'block_image_verify("%s", '
+                              'package_extract_file("%s.transfer.list"), '
+                              '"%s.new.dat", "%s.patch.dat")) then') % (
+                              self.device, ranges_str, expected_sha1,
+                              self.device, partition, partition, partition))
       else:
         script.AppendExtra('if range_sha1("%s", "%s") == "%s" then' % (
                            self.device, ranges_str, self.src.TotalSha1()))
@@ -1661,7 +1669,13 @@ class BlockDifference(object):
     ZipWrite(output_zip,
              '{}.transfer.list'.format(self.path),
              '{}.transfer.list'.format(self.partition))
-    ZipWrite(output_zip,
+    if lzma and self.use_lzma:
+      ZipWrite(output_zip,
+             '{}.new.dat.xz'.format(self.path),
+             '{}.new.dat.xz'.format(self.partition),
+             compress_type=zipfile.ZIP_STORED)
+    else:
+      ZipWrite(output_zip,
              '{}.new.dat'.format(self.path),
              '{}.new.dat'.format(self.partition))
     ZipWrite(output_zip,
@@ -1674,7 +1688,13 @@ class BlockDifference(object):
     else:
       code = ErrorCode.VENDOR_UPDATE_FAILURE
 
-    call = ('block_image_update("{device}", '
+    if lzma and self.use_lzma:
+      call = ('block_image_update("{device}", '
+            'package_extract_file("{partition}.transfer.list"), '
+            '"{partition}.new.dat.xz", "{partition}.patch.dat");\n'.format(
+                device=self.device, partition=self.partition))
+    else:
+      call = ('block_image_update("{device}", '
             'package_extract_file("{partition}.transfer.list"), '
             '"{partition}.new.dat", "{partition}.patch.dat") ||\n'
             '  abort("E{code}: Failed to update {partition} image.");'.format(
diff --git a/tools/releasetools/ota_from_target_files.py b/tools/releasetools/ota_from_target_files.py
index e926c2b..e2974a1 100755
--- a/tools/releasetools/ota_from_target_files.py
+++ b/tools/releasetools/ota_from_target_files.py
@@ -93,6 +93,10 @@ Usage:  ota_from_target_files [flags] input_target_files output_ota_package
       file-based OTA if the target_files is older and doesn't support
       block-based OTAs.
 
+  -z  Compress the block-based image using LZMA. Results in substantial
+      space reduction at the cost of longer compress/decompress time.
+      Requires the "backports.lzma" module to be installed.
+
   -b  (--binary)  <file>
       Use the given binary as the update-binary in the output package,
       instead of the binary in the build's target_files.  Use for
@@ -181,6 +185,7 @@ OPTIONS.payload_signer_args = []
 OPTIONS.backuptool = False
 OPTIONS.override_device = 'auto'
 OPTIONS.override_prop = False
+OPTIONS.use_lzma = False
 
 def MostPopularKey(d, default):
   """Given a dict, return the key corresponding to the largest
@@ -699,7 +704,7 @@ else if get_stage("%(bcb_dev)s") == "3/3" then
     # writes incrementals to do it.
     system_tgt = GetImage("system", OPTIONS.input_tmp, OPTIONS.info_dict)
     system_tgt.ResetFileMap()
-    system_diff = common.BlockDifference("system", system_tgt, src=None)
+    system_diff = common.BlockDifference("system", system_tgt, src=None, use_lzma=OPTIONS.use_lzma)
     system_diff.WriteScript(script, output_zip)
   else:
     script.FormatPartition("/system")
@@ -732,7 +737,7 @@ else if get_stage("%(bcb_dev)s") == "3/3" then
     if block_based:
       vendor_tgt = GetImage("vendor", OPTIONS.input_tmp, OPTIONS.info_dict)
       vendor_tgt.ResetFileMap()
-      vendor_diff = common.BlockDifference("vendor", vendor_tgt)
+      vendor_diff = common.BlockDifference("vendor", vendor_tgt, use_lzma=OPTIONS.use_lzma)
       vendor_diff.WriteScript(script, output_zip)
     else:
       script.FormatPartition("/vendor")
@@ -955,7 +960,8 @@ def WriteBlockIncrementalOTAPackage(target_zip, source_zip, output_zip):
   system_diff = common.BlockDifference("system", system_tgt, system_src,
                                        check_first_block,
                                        version=blockimgdiff_version,
-                                       disable_imgdiff=disable_imgdiff)
+                                       disable_imgdiff=disable_imgdiff,
+                                       use_lzma=OPTIONS.use_lzma)
 
   if HasVendorPartition(target_zip):
     if not HasVendorPartition(source_zip):
@@ -973,7 +979,8 @@ def WriteBlockIncrementalOTAPackage(target_zip, source_zip, output_zip):
     vendor_diff = common.BlockDifference("vendor", vendor_tgt, vendor_src,
                                          check_first_block,
                                          version=blockimgdiff_version,
-                                         disable_imgdiff=disable_imgdiff)
+                                         disable_imgdiff=disable_imgdiff,
+                                         use_lzma=OPTIONS.use_lzma)
   else:
     vendor_diff = None
 
@@ -2036,12 +2043,16 @@ def main(argv):
       OPTIONS.payload_signer_args = shlex.split(a)
     elif o in ("--backup"):
       OPTIONS.backuptool = bool(a.lower() == 'true')
+    elif o in ("-z", "--use_lzma"):
+      OPTIONS.use_lzma = True
+      # Import now, and bomb out if backports.lzma isn't installed
+      from backports import lzma
     else:
       return False
     return True
 
   args = common.ParseOptions(argv, __doc__,
-                             extra_opts="b:k:i:d:wne:t:a:2o:",
+                             extra_opts="b:k:i:d:wne:t:a:2o:z",
                              extra_long_opts=[
                                  "board_config=",
                                  "package_key=",
@@ -2067,7 +2078,8 @@ def main(argv):
                                  "log_diff=",
                                  "payload_signer=",
                                  "payload_signer_args=",
-                                 "backup="
+                                 "backup=",
+                                 "use_lzma"
                              ], extra_option_handler=option_handler)
 
   if len(args) != 2:
-- 
2.9.3

