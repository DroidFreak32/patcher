From 5ee9278afc542b531fbc91efe0dd5e8ab004f75c Mon Sep 17 00:00:00 2001
From: Sultanxda <sultanxda@gmail.com>
Date: Tue, 18 Apr 2017 10:43:35 -0700
Subject: [PATCH] fw: Don't consume home key press when KEY_ACTION_SLEEP is
 used

Consuming the next home key press when long-press/double-tap to sleep is
invoked using the home button causes the first home button press after the
device wakes up to be ignored.

Change-Id: I38759ce1bdce29513577894048a4cabceecb72e2
---
 .../core/java/com/android/server/policy/PhoneWindowManager.java   | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index e665da1..8d32b08 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -3748,7 +3748,9 @@ public long interceptKeyBeforeDispatching(WindowState win, KeyEvent event, int p
                     mHomeDoubleTapPending = false;
                     mHandler.removeCallbacks(mHomeDoubleTapTimeoutRunnable);
                     performKeyAction(mDoubleTapOnHomeBehavior, event);
-                    mHomeConsumed = true;
+                    if (mDoubleTapOnHomeBehavior != KEY_ACTION_SLEEP) {
+                        mHomeConsumed = true;
+                    }
                 } else if (mLongPressOnHomeBehavior == KEY_ACTION_APP_SWITCH
                         || mDoubleTapOnHomeBehavior == KEY_ACTION_APP_SWITCH) {
                     preloadRecentApps();
@@ -3762,7 +3764,9 @@ public long interceptKeyBeforeDispatching(WindowState win, KeyEvent event, int p
                     mHomePressed = true;
                     performHapticFeedbackLw(null, HapticFeedbackConstants.LONG_PRESS, false);
                     performKeyAction(mLongPressOnHomeBehavior, event);
-                    mHomeConsumed = true;
+                    if (mLongPressOnHomeBehavior != KEY_ACTION_SLEEP) {
+                        mHomeConsumed = true;
+                    }
                 }
             }
             return -1;
